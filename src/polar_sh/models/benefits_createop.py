"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .benefitads import BenefitAds, BenefitAdsTypedDict
from .benefitadscreate import BenefitAdsCreate, BenefitAdsCreateTypedDict
from .benefitarticles import BenefitArticles, BenefitArticlesTypedDict
from .benefitcustom import BenefitCustom, BenefitCustomTypedDict
from .benefitcustomcreate import BenefitCustomCreate, BenefitCustomCreateTypedDict
from .benefitdiscord_output import BenefitDiscordOutput, BenefitDiscordOutputTypedDict
from .benefitdiscordcreate import BenefitDiscordCreate, BenefitDiscordCreateTypedDict
from .benefitdownloadables import BenefitDownloadables, BenefitDownloadablesTypedDict
from .benefitdownloadablescreate import BenefitDownloadablesCreate, BenefitDownloadablesCreateTypedDict
from .benefitgithubrepository import BenefitGitHubRepository, BenefitGitHubRepositoryTypedDict
from .benefitgithubrepositorycreate import BenefitGitHubRepositoryCreate, BenefitGitHubRepositoryCreateTypedDict
from polar_sh.types import BaseModel
from polar_sh.utils import FieldMetadata, SecurityMetadata, get_discriminator
from pydantic import Discriminator, Tag
from typing import Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class BenefitsCreateSecurityTypedDict(TypedDict):
    open_id_connect: NotRequired[str]
    http_bearer: NotRequired[str]
    

class BenefitsCreateSecurity(BaseModel):
    open_id_connect: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="openIdConnect", field_name="Authorization"))] = None
    http_bearer: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="bearer", field_name="Authorization"))] = None
    

BenefitsCreateBenefitCreateTypedDict = Union[BenefitAdsCreateTypedDict, BenefitDiscordCreateTypedDict, BenefitGitHubRepositoryCreateTypedDict, BenefitDownloadablesCreateTypedDict, BenefitCustomCreateTypedDict]


BenefitsCreateBenefitCreate = Annotated[Union[Annotated[BenefitCustomCreate, Tag("custom")], Annotated[BenefitAdsCreate, Tag("ads")], Annotated[BenefitDiscordCreate, Tag("discord")], Annotated[BenefitGitHubRepositoryCreate, Tag("github_repository")], Annotated[BenefitDownloadablesCreate, Tag("downloadables")]], Discriminator(lambda m: get_discriminator(m, "type", "type"))]


BenefitsCreateResponseBenefitsCreateTypedDict = Union[BenefitArticlesTypedDict, BenefitAdsTypedDict, BenefitDiscordOutputTypedDict, BenefitGitHubRepositoryTypedDict, BenefitDownloadablesTypedDict, BenefitCustomTypedDict]
r"""Benefit created."""


BenefitsCreateResponseBenefitsCreate = Union[BenefitArticles, BenefitAds, BenefitDiscordOutput, BenefitGitHubRepository, BenefitDownloadables, BenefitCustom]
r"""Benefit created."""

