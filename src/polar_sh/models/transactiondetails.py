"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .paymentprocessor import PaymentProcessor
from .platformfeetype import PlatformFeeType
from .transaction import Transaction, TransactionTypedDict
from .transactiondonation import TransactionDonation, TransactionDonationTypedDict
from .transactionembedded import TransactionEmbedded, TransactionEmbeddedTypedDict
from .transactionissuereward import TransactionIssueReward, TransactionIssueRewardTypedDict
from .transactionorder import TransactionOrder, TransactionOrderTypedDict
from .transactionpledge import TransactionPledge, TransactionPledgeTypedDict
from .transactiontype import TransactionType
from datetime import datetime
from polar_sh.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, TypedDict


class TransactionDetailsTypedDict(TypedDict):
    created_at: datetime
    r"""Creation timestamp of the object."""
    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""
    id: str
    type: TransactionType
    r"""Type of transactions."""
    processor: Nullable[PaymentProcessor]
    currency: str
    amount: int
    account_currency: str
    account_amount: int
    platform_fee_type: Nullable[PlatformFeeType]
    pledge_id: Nullable[str]
    issue_reward_id: Nullable[str]
    order_id: Nullable[str]
    donation_id: Nullable[str]
    payout_transaction_id: Nullable[str]
    incurred_by_transaction_id: Nullable[str]
    pledge: Nullable[TransactionPledgeTypedDict]
    issue_reward: Nullable[TransactionIssueRewardTypedDict]
    order: Nullable[TransactionOrderTypedDict]
    donation: Nullable[TransactionDonationTypedDict]
    account_incurred_transactions: List[TransactionEmbeddedTypedDict]
    incurred_amount: int
    gross_amount: int
    net_amount: int
    paid_transactions: List[TransactionTypedDict]
    

class TransactionDetails(BaseModel):
    created_at: datetime
    r"""Creation timestamp of the object."""
    modified_at: Nullable[datetime]
    r"""Last modification timestamp of the object."""
    id: str
    type: TransactionType
    r"""Type of transactions."""
    processor: Nullable[PaymentProcessor]
    currency: str
    amount: int
    account_currency: str
    account_amount: int
    platform_fee_type: Nullable[PlatformFeeType]
    pledge_id: Nullable[str]
    issue_reward_id: Nullable[str]
    order_id: Nullable[str]
    donation_id: Nullable[str]
    payout_transaction_id: Nullable[str]
    incurred_by_transaction_id: Nullable[str]
    pledge: Nullable[TransactionPledge]
    issue_reward: Nullable[TransactionIssueReward]
    order: Nullable[TransactionOrder]
    donation: Nullable[TransactionDonation]
    account_incurred_transactions: List[TransactionEmbedded]
    incurred_amount: int
    gross_amount: int
    net_amount: int
    paid_transactions: List[Transaction]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["modified_at", "processor", "platform_fee_type", "pledge_id", "issue_reward_id", "order_id", "donation_id", "payout_transaction_id", "incurred_by_transaction_id", "pledge", "issue_reward", "order", "donation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
