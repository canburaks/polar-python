"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .currencyamount import CurrencyAmount, CurrencyAmountTypedDict
from .organization_output import OrganizationOutput, OrganizationOutputTypedDict
from .pledge_output import PledgeOutput, PledgeOutputTypedDict
from .rewardstate import RewardState
from .user import User, UserTypedDict
from datetime import datetime
from polar_sh.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class RewardTypedDict(TypedDict):
    pledge: PledgeOutputTypedDict
    r"""The pledge that the reward was split from"""
    amount: CurrencyAmountTypedDict
    state: RewardState
    user: NotRequired[Nullable[UserTypedDict]]
    r"""The user that received the reward (if any)"""
    organization: NotRequired[Nullable[OrganizationOutputTypedDict]]
    r"""The organization that received the reward (if any)"""
    paid_at: NotRequired[Nullable[datetime]]
    r"""If and when the reward was paid out."""
    

class Reward(BaseModel):
    pledge: PledgeOutput
    r"""The pledge that the reward was split from"""
    amount: CurrencyAmount
    state: RewardState
    user: OptionalNullable[User] = UNSET
    r"""The user that received the reward (if any)"""
    organization: OptionalNullable[OrganizationOutput] = UNSET
    r"""The organization that received the reward (if any)"""
    paid_at: OptionalNullable[datetime] = UNSET
    r"""If and when the reward was paid out."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["user", "organization", "paid_at"]
        nullable_fields = ["user", "organization", "paid_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
