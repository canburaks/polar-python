"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .benefitadssubscriber import BenefitAdsSubscriber, BenefitAdsSubscriberTypedDict
from .benefitarticlessubscriber import BenefitArticlesSubscriber, BenefitArticlesSubscriberTypedDict
from .benefitcustomsubscriber import BenefitCustomSubscriber, BenefitCustomSubscriberTypedDict
from .benefitdiscordsubscriber import BenefitDiscordSubscriber, BenefitDiscordSubscriberTypedDict
from .benefitdownloadablessubscriber import BenefitDownloadablesSubscriber, BenefitDownloadablesSubscriberTypedDict
from .benefitgithubrepositorysubscriber import BenefitGitHubRepositorySubscriber, BenefitGitHubRepositorySubscriberTypedDict
from polar_sh.types import BaseModel
from polar_sh.utils import FieldMetadata, PathParamMetadata, SecurityMetadata, get_discriminator
from pydantic import Discriminator, Tag
from typing import Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class UsersGetBenefitSecurityTypedDict(TypedDict):
    open_id_connect: NotRequired[str]
    http_bearer: NotRequired[str]
    

class UsersGetBenefitSecurity(BaseModel):
    open_id_connect: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="openIdConnect", field_name="Authorization"))] = None
    http_bearer: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="bearer", field_name="Authorization"))] = None
    

class UsersGetBenefitRequestTypedDict(TypedDict):
    id: str
    r"""The benefit ID."""
    

class UsersGetBenefitRequest(BaseModel):
    id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The benefit ID."""
    

UsersGetBenefitResponseUsersGetBenefitTypedDict = Union[BenefitArticlesSubscriberTypedDict, BenefitDiscordSubscriberTypedDict, BenefitGitHubRepositorySubscriberTypedDict, BenefitDownloadablesSubscriberTypedDict, BenefitAdsSubscriberTypedDict, BenefitCustomSubscriberTypedDict]
r"""Successful Response"""


UsersGetBenefitResponseUsersGetBenefit = Annotated[Union[Annotated[BenefitArticlesSubscriber, Tag("articles")], Annotated[BenefitAdsSubscriber, Tag("ads")], Annotated[BenefitDiscordSubscriber, Tag("discord")], Annotated[BenefitCustomSubscriber, Tag("custom")], Annotated[BenefitGitHubRepositorySubscriber, Tag("github_repository")], Annotated[BenefitDownloadablesSubscriber, Tag("downloadables")]], Discriminator(lambda m: get_discriminator(m, "type", "type"))]
r"""Successful Response"""

