"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .platforms import Platforms
from polar_sh.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from polar_sh.utils import FieldMetadata, QueryParamMetadata, SecurityMetadata
from pydantic import model_serializer
from typing import Any, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class IssuesListSecurityTypedDict(TypedDict):
    open_id_connect: NotRequired[str]
    http_bearer: NotRequired[str]
    

class IssuesListSecurity(BaseModel):
    open_id_connect: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="openIdConnect", field_name="Authorization"))] = None
    http_bearer: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="bearer", field_name="Authorization"))] = None
    

IssuesListQueryParamPlatformFilterTypedDict = Union[Platforms, List[Platforms]]
r"""Filter by platform."""


IssuesListQueryParamPlatformFilter = Union[Platforms, List[Platforms]]
r"""Filter by platform."""


QueryParamExternalOrganizationNameFilterTypedDict = Union[str, List[str]]
r"""Filter by external organization name."""


QueryParamExternalOrganizationNameFilter = Union[str, List[str]]
r"""Filter by external organization name."""


IssuesListQueryParamRepositoryNameFilterTypedDict = Union[str, List[str]]
r"""Filter by repository name."""


IssuesListQueryParamRepositoryNameFilter = Union[str, List[str]]
r"""Filter by repository name."""


IssueNumberFilterTypedDict = Union[int, List[int]]
r"""Filter by issue number."""


IssueNumberFilter = Union[int, List[int]]
r"""Filter by issue number."""


IssuesListQueryParamOrganizationIDFilterTypedDict = Union[str, List[str]]
r"""Filter by organization ID."""


IssuesListQueryParamOrganizationIDFilter = Union[str, List[str]]
r"""Filter by organization ID."""


IssuesListQueryParamSortingTypedDict = Union[List[Any], str]
r"""Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."""


IssuesListQueryParamSorting = Union[List[Any], str]
r"""Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."""


class IssuesListRequestTypedDict(TypedDict):
    platform: NotRequired[Nullable[IssuesListQueryParamPlatformFilterTypedDict]]
    r"""Filter by platform."""
    external_organization_name: NotRequired[Nullable[QueryParamExternalOrganizationNameFilterTypedDict]]
    r"""Filter by external organization name."""
    repository_name: NotRequired[Nullable[IssuesListQueryParamRepositoryNameFilterTypedDict]]
    r"""Filter by repository name."""
    number: NotRequired[Nullable[IssueNumberFilterTypedDict]]
    r"""Filter by issue number."""
    organization_id: NotRequired[Nullable[IssuesListQueryParamOrganizationIDFilterTypedDict]]
    r"""Filter by organization ID."""
    is_badged: NotRequired[Nullable[bool]]
    r"""Filter by badged status."""
    page: NotRequired[int]
    r"""Page number, defaults to 1."""
    limit: NotRequired[int]
    r"""Size of a page, defaults to 10. Maximum is 100."""
    sorting: NotRequired[Nullable[IssuesListQueryParamSortingTypedDict]]
    r"""Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."""
    

class IssuesListRequest(BaseModel):
    platform: Annotated[OptionalNullable[IssuesListQueryParamPlatformFilter], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Filter by platform."""
    external_organization_name: Annotated[OptionalNullable[QueryParamExternalOrganizationNameFilter], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Filter by external organization name."""
    repository_name: Annotated[OptionalNullable[IssuesListQueryParamRepositoryNameFilter], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Filter by repository name."""
    number: Annotated[OptionalNullable[IssueNumberFilter], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Filter by issue number."""
    organization_id: Annotated[OptionalNullable[IssuesListQueryParamOrganizationIDFilter], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Filter by organization ID."""
    is_badged: Annotated[OptionalNullable[bool], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Filter by badged status."""
    page: Annotated[Optional[int], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 1
    r"""Page number, defaults to 1."""
    limit: Annotated[Optional[int], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 10
    r"""Size of a page, defaults to 10. Maximum is 100."""
    sorting: Annotated[OptionalNullable[IssuesListQueryParamSorting], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = UNSET
    r"""Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["platform", "external_organization_name", "repository_name", "number", "organization_id", "is_badged", "page", "limit", "sorting"]
        nullable_fields = ["platform", "external_organization_name", "repository_name", "number", "organization_id", "is_badged", "sorting"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
