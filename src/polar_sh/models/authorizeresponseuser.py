"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .authorizeuser import AuthorizeUser, AuthorizeUserTypedDict
from .oauth2clientpublic import OAuth2ClientPublic, OAuth2ClientPublicTypedDict
from .scope import Scope
from enum import Enum
from polar_sh.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Final, List, TypedDict
from typing_extensions import Annotated


class AuthorizeResponseUserSubType(str, Enum):
    USER = "user"

class AuthorizeResponseUserTypedDict(TypedDict):
    client: OAuth2ClientPublicTypedDict
    sub: Nullable[AuthorizeUserTypedDict]
    scopes: List[Scope]
    

class AuthorizeResponseUser(BaseModel):
    client: OAuth2ClientPublic
    sub: Nullable[AuthorizeUser]
    scopes: List[Scope]
    SUB_TYPE: Annotated[Final[AuthorizeResponseUserSubType], pydantic.Field(alias="sub_type")] = AuthorizeResponseUserSubType.USER # type: ignore
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["sub"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
