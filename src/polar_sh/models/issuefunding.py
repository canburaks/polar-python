"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .currencyamount import CurrencyAmount, CurrencyAmountTypedDict
from .issue_output import IssueOutput, IssueOutputTypedDict
from .pledgestypesummaries import PledgesTypeSummaries, PledgesTypeSummariesTypedDict
from polar_sh.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict


class IssueFundingTypedDict(TypedDict):
    issue: IssueOutputTypedDict
    funding_goal: Nullable[CurrencyAmountTypedDict]
    total: CurrencyAmountTypedDict
    pledges_summaries: PledgesTypeSummariesTypedDict
    

class IssueFunding(BaseModel):
    issue: IssueOutput
    funding_goal: Nullable[CurrencyAmount]
    total: CurrencyAmount
    pledges_summaries: PledgesTypeSummaries
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["funding_goal"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
