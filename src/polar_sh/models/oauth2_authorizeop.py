"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .authorizeresponseorganization import AuthorizeResponseOrganization, AuthorizeResponseOrganizationTypedDict
from .authorizeresponseuser import AuthorizeResponseUser, AuthorizeResponseUserTypedDict
from polar_sh.types import BaseModel
from polar_sh.utils import FieldMetadata, SecurityMetadata, get_discriminator
from pydantic import Discriminator, Tag
from typing import Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class Oauth2AuthorizeSecurityTypedDict(TypedDict):
    open_id_connect: NotRequired[str]
    http_bearer: NotRequired[str]
    

class Oauth2AuthorizeSecurity(BaseModel):
    open_id_connect: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="openIdConnect", field_name="Authorization"))] = None
    http_bearer: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="bearer", field_name="Authorization"))] = None
    

Oauth2AuthorizeResponseOauth2AuthorizeTypedDict = Union[AuthorizeResponseUserTypedDict, AuthorizeResponseOrganizationTypedDict]
r"""Successful Response"""


Oauth2AuthorizeResponseOauth2Authorize = Annotated[Union[Annotated[AuthorizeResponseUser, Tag("user")], Annotated[AuthorizeResponseOrganization, Tag("organization")]], Discriminator(lambda m: get_discriminator(m, "sub_type", "sub_type"))]
r"""Successful Response"""

