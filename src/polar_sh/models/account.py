"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .accounttype import AccountType
from .organization_output import OrganizationOutput, OrganizationOutputTypedDict
from .status import Status
from .userbase import UserBase, UserBaseTypedDict
from polar_sh.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, TypedDict


class AccountTypedDict(TypedDict):
    id: str
    account_type: AccountType
    status: Status
    stripe_id: Nullable[str]
    open_collective_slug: Nullable[str]
    is_details_submitted: bool
    is_charges_enabled: bool
    is_payouts_enabled: bool
    country: str
    users: List[UserBaseTypedDict]
    organizations: List[OrganizationOutputTypedDict]
    

class Account(BaseModel):
    id: str
    account_type: AccountType
    status: Status
    stripe_id: Nullable[str]
    open_collective_slug: Nullable[str]
    is_details_submitted: bool
    is_charges_enabled: bool
    is_payouts_enabled: bool
    country: str
    users: List[UserBase]
    organizations: List[OrganizationOutput]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["stripe_id", "open_collective_slug"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
