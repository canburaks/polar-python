"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .downloadablefileread import DownloadableFileRead, DownloadableFileReadTypedDict
from .filepatch import FilePatch, FilePatchTypedDict
from .organizationavatarfileread import OrganizationAvatarFileRead, OrganizationAvatarFileReadTypedDict
from .productmediafileread_output import ProductMediaFileReadOutput, ProductMediaFileReadOutputTypedDict
from polar_sh.types import BaseModel
from polar_sh.utils import FieldMetadata, PathParamMetadata, RequestMetadata, SecurityMetadata, get_discriminator
from pydantic import Discriminator, Tag
from typing import Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class FilesUpdateSecurityTypedDict(TypedDict):
    open_id_connect: NotRequired[str]
    http_bearer: NotRequired[str]
    

class FilesUpdateSecurity(BaseModel):
    open_id_connect: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="openIdConnect", field_name="Authorization"))] = None
    http_bearer: Annotated[Optional[str], FieldMetadata(security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="bearer", field_name="Authorization"))] = None
    

class FilesUpdateRequestTypedDict(TypedDict):
    id: str
    r"""The file ID."""
    file_patch: FilePatchTypedDict
    

class FilesUpdateRequest(BaseModel):
    id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The file ID."""
    file_patch: Annotated[FilePatch, FieldMetadata(request=RequestMetadata(media_type="application/json"))]
    

FilesUpdateResponseFilesUpdateTypedDict = Union[DownloadableFileReadTypedDict, ProductMediaFileReadOutputTypedDict, OrganizationAvatarFileReadTypedDict]
r"""Successful Response"""


FilesUpdateResponseFilesUpdate = Annotated[Union[Annotated[DownloadableFileRead, Tag("downloadable")], Annotated[ProductMediaFileReadOutput, Tag("product_media")], Annotated[OrganizationAvatarFileRead, Tag("organization_avatar")]], Discriminator(lambda m: get_discriminator(m, "service", "service"))]
r"""Successful Response"""

