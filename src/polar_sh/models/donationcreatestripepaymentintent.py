"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from polar_sh.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Final, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class SetupFutureUsage(str, Enum):
    ON_SESSION = "on_session"

class DonationCreateStripePaymentIntentTypedDict(TypedDict):
    to_organization_id: str
    email: str
    r"""The donators email address. Receipts will be sent to this address."""
    amount: int
    r"""The amount in cents."""
    currency: NotRequired[str]
    r"""The currency. Currently, only `usd` is supported."""
    on_behalf_of_organization_id: NotRequired[Nullable[str]]
    r"""The organization to give credit to. The pledge will be paid by the authenticated user."""
    message: NotRequired[Nullable[str]]
    r"""Message included with the donation"""
    issue_id: NotRequired[Nullable[str]]
    

class DonationCreateStripePaymentIntent(BaseModel):
    to_organization_id: str
    email: str
    r"""The donators email address. Receipts will be sent to this address."""
    amount: int
    r"""The amount in cents."""
    currency: Optional[str] = "usd"
    r"""The currency. Currently, only `usd` is supported."""
    SETUP_FUTURE_USAGE: Annotated[Final[OptionalNullable[SetupFutureUsage]], pydantic.Field(alias="setup_future_usage")] = SetupFutureUsage.ON_SESSION # type: ignore
    r"""If the payment method should be saved for future usage."""
    on_behalf_of_organization_id: OptionalNullable[str] = UNSET
    r"""The organization to give credit to. The pledge will be paid by the authenticated user."""
    message: OptionalNullable[str] = UNSET
    r"""Message included with the donation"""
    issue_id: OptionalNullable[str] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["currency", "setup_future_usage", "on_behalf_of_organization_id", "message", "issue_id"]
        nullable_fields = ["setup_future_usage", "on_behalf_of_organization_id", "message", "issue_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
