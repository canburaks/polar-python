"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from polar_sh import models, utils
from polar_sh._hooks import SDKHooks
from polar_sh.accounts import Accounts
from polar_sh.advertisements import Advertisements
from polar_sh.articles import Articles
from polar_sh.benefits import Benefits
from polar_sh.checkouts import Checkouts
from polar_sh.documented import Documented
from polar_sh.donations import Donations
from polar_sh.external_organizations import ExternalOrganizations
from polar_sh.featured import Featured
from polar_sh.files import Files
from polar_sh.funding_sdk import FundingSDK
from polar_sh.issue_funding_sdk import IssueFundingSDK
from polar_sh.issues import Issues
from polar_sh.metrics_sdk import MetricsSDK
from polar_sh.oauth2 import Oauth2
from polar_sh.orders import Orders
from polar_sh.organizations import Organizations
from polar_sh.pledges import Pledges
from polar_sh.products import Products
from polar_sh.pull_requests import PullRequests
from polar_sh.repositories import Repositories
from polar_sh.rewards import Rewards
from polar_sh.subscriptions import Subscriptions
from polar_sh.transactions import Transactions
from polar_sh.types import OptionalNullable, UNSET
from polar_sh.users import Users
from polar_sh.webhooks import Webhooks
from typing import Any, Callable, Dict, Optional, Union

class Polar(BaseSDK):
    r"""Polar API: Polar HTTP and Webhooks API

    Read the docs at https://docs.polar.sh/api
    """
    users: Users
    documented: Documented
    r"""Endpoints shown and documented in the Polar API documentation."""
    featured: Featured
    r"""Endpoints featured in the Polar API documentation for their interest in common use-cases."""
    funding: FundingSDK
    external_organizations: ExternalOrganizations
    issue_funding: IssueFundingSDK
    r"""Endpoints related to issue funding and rewards in the Polar API."""
    repositories: Repositories
    rewards: Rewards
    pull_requests: PullRequests
    accounts: Accounts
    issues: Issues
    pledges: Pledges
    organizations: Organizations
    subscriptions: Subscriptions
    articles: Articles
    transactions: Transactions
    advertisements: Advertisements
    donations: Donations
    oauth2: Oauth2
    benefits: Benefits
    webhooks: Webhooks
    products: Products
    orders: Orders
    checkouts: Checkouts
    files: Files
    metrics: MetricsSDK
    def __init__(
        self,
        open_id_connect: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param open_id_connect: The open_id_connect required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."
        
        security: Any = None
        if callable(open_id_connect):
            security = lambda: models.Security(open_id_connect = open_id_connect()) # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(open_id_connect = open_id_connect)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        BaseSDK.__init__(self, SDKConfiguration(
            client=client,
            async_client=async_client,
            security=security,
            server_url=server_url,
            server_idx=server_idx,
            retry_config=retry_config,
            timeout_ms=timeout_ms,
            debug_logger=debug_logger
        ))

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.users = Users(self.sdk_configuration)
        self.documented = Documented(self.sdk_configuration)
        self.featured = Featured(self.sdk_configuration)
        self.funding = FundingSDK(self.sdk_configuration)
        self.external_organizations = ExternalOrganizations(self.sdk_configuration)
        self.issue_funding = IssueFundingSDK(self.sdk_configuration)
        self.repositories = Repositories(self.sdk_configuration)
        self.rewards = Rewards(self.sdk_configuration)
        self.pull_requests = PullRequests(self.sdk_configuration)
        self.accounts = Accounts(self.sdk_configuration)
        self.issues = Issues(self.sdk_configuration)
        self.pledges = Pledges(self.sdk_configuration)
        self.organizations = Organizations(self.sdk_configuration)
        self.subscriptions = Subscriptions(self.sdk_configuration)
        self.articles = Articles(self.sdk_configuration)
        self.transactions = Transactions(self.sdk_configuration)
        self.advertisements = Advertisements(self.sdk_configuration)
        self.donations = Donations(self.sdk_configuration)
        self.oauth2 = Oauth2(self.sdk_configuration)
        self.benefits = Benefits(self.sdk_configuration)
        self.webhooks = Webhooks(self.sdk_configuration)
        self.products = Products(self.sdk_configuration)
        self.orders = Orders(self.sdk_configuration)
        self.checkouts = Checkouts(self.sdk_configuration)
        self.files = Files(self.sdk_configuration)
        self.metrics = MetricsSDK(self.sdk_configuration)
    
