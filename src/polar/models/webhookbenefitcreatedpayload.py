"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .benefitads import BenefitAds, BenefitAdsTypedDict
from .benefitarticles import BenefitArticles, BenefitArticlesTypedDict
from .benefitcustom import BenefitCustom, BenefitCustomTypedDict
from .benefitdiscord_input import BenefitDiscordInput, BenefitDiscordInputTypedDict
from .benefitdownloadables import BenefitDownloadables, BenefitDownloadablesTypedDict
from .benefitgithubrepository import BenefitGitHubRepository, BenefitGitHubRepositoryTypedDict
from enum import Enum
from polar.types import BaseModel
import pydantic
from typing import Final, TypedDict, Union
from typing_extensions import Annotated


class WebhookBenefitCreatedPayloadType(str, Enum):
    BENEFIT_CREATED = "benefit.created"

DataTypedDict = Union[BenefitArticlesTypedDict, BenefitAdsTypedDict, BenefitDiscordInputTypedDict, BenefitGitHubRepositoryTypedDict, BenefitDownloadablesTypedDict, BenefitCustomTypedDict]


Data = Union[BenefitArticles, BenefitAds, BenefitDiscordInput, BenefitGitHubRepository, BenefitDownloadables, BenefitCustom]


class WebhookBenefitCreatedPayloadTypedDict(TypedDict):
    r"""Sent when a new benefit is created.

    **Discord & Slack support:** Basic
    """
    
    data: DataTypedDict
    

class WebhookBenefitCreatedPayload(BaseModel):
    r"""Sent when a new benefit is created.

    **Discord & Slack support:** Basic
    """
    
    data: Data
    TYPE: Annotated[Final[WebhookBenefitCreatedPayloadType], pydantic.Field(alias="type")] = WebhookBenefitCreatedPayloadType.BENEFIT_CREATED # type: ignore
    
